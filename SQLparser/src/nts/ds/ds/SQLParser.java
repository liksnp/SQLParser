/* SQLParser.java */
/* Generated By:JavaCC: Do not edit this line. SQLParser.java */
package nts.ds.ds;

import java.io.Reader;
import java.io.FileInputStream;
import java.util.HashSet;
import java.util.Set;
import java.util.ArrayList;
import java.util.List;

class SQLParser implements SQLParserConstants {

    /** Parse PL/SQL from files.  Each arg is expected to be the name of a file,
        or "-" to indicate System.in.
     */
    public static void main( String args[] ) throws Throwable {
        if (args.length < 1) {
            args = new String[] {"-"};
        }
        for (int a = 0; a < args.length; ++a) {
            final String input = args[a];
            final SQLParser parser = new SQLParser("-".equals(input) ? System.in : new FileInputStream(input));
            try {
                parser.CompilationUnit();
            } catch(Throwable t) {
                System.err.println(input + ":1: not parsed");
                t.printStackTrace();
            }
            System.out.println("Parsed input: " + input);
                        System.out.println(parser.select_);
        }
    }

    public ParserSelectStatement select_;

    public void reInit(Reader input) {
        ReInit(input);
    }

    private String lastObjectReference = null;

    protected boolean seeTYPE() {
        return "TYPE".equalsIgnoreCase(getToken(1).image);
    }

    protected static final Set<String> ANALYTIC_FUNCTION_NAMES = new HashSet<String>();
    static {
        ANALYTIC_FUNCTION_NAMES.add("AVG");
        ANALYTIC_FUNCTION_NAMES.add("CORR");
        ANALYTIC_FUNCTION_NAMES.add("COVAR_POP");
        ANALYTIC_FUNCTION_NAMES.add("COVAR_SAMP");
        ANALYTIC_FUNCTION_NAMES.add("COUNT");
        ANALYTIC_FUNCTION_NAMES.add("CUME_DIST");
        ANALYTIC_FUNCTION_NAMES.add("DENSE_RANK");
        ANALYTIC_FUNCTION_NAMES.add("FIRST");
        ANALYTIC_FUNCTION_NAMES.add("FIRST_VALUE");
        ANALYTIC_FUNCTION_NAMES.add("LAG");
        ANALYTIC_FUNCTION_NAMES.add("LAST");
        ANALYTIC_FUNCTION_NAMES.add("LAST_VALUE");
        ANALYTIC_FUNCTION_NAMES.add("LEAD");
        ANALYTIC_FUNCTION_NAMES.add("MAX");
        ANALYTIC_FUNCTION_NAMES.add("MIN");
        ANALYTIC_FUNCTION_NAMES.add("NTILE");
        ANALYTIC_FUNCTION_NAMES.add("PERCENT_RANK");
        ANALYTIC_FUNCTION_NAMES.add("PERCENTILE_CONT");
        ANALYTIC_FUNCTION_NAMES.add("PERCENTILE_DISC");
        ANALYTIC_FUNCTION_NAMES.add("RANK");
        ANALYTIC_FUNCTION_NAMES.add("RATIO_TO_REPORT");
        ANALYTIC_FUNCTION_NAMES.add("REGR_SLOPE");
        ANALYTIC_FUNCTION_NAMES.add("REGR_INTERCEPT");
        ANALYTIC_FUNCTION_NAMES.add("REGR_COUNT");
        ANALYTIC_FUNCTION_NAMES.add("REGR_R2");
        ANALYTIC_FUNCTION_NAMES.add("REGR_AVGX");
        ANALYTIC_FUNCTION_NAMES.add("REGR_AVGY");
        ANALYTIC_FUNCTION_NAMES.add("REGR_SXX");
        ANALYTIC_FUNCTION_NAMES.add("REGR_SYY");
        ANALYTIC_FUNCTION_NAMES.add("REGR_SXY");
        ANALYTIC_FUNCTION_NAMES.add("ROW_NUMBER");
        ANALYTIC_FUNCTION_NAMES.add("STDDEV");
        ANALYTIC_FUNCTION_NAMES.add("STDDEV_POP");
        ANALYTIC_FUNCTION_NAMES.add("STDDEV_SAMP");
        ANALYTIC_FUNCTION_NAMES.add("SUM");
        ANALYTIC_FUNCTION_NAMES.add("VAR_POP");
        ANALYTIC_FUNCTION_NAMES.add("VAR_SAMP");
        ANALYTIC_FUNCTION_NAMES.add("VARIANCE");
    }

    protected boolean seeAnalyticFunction() {
        return "(".equals(getToken(2).image)
            && ANALYTIC_FUNCTION_NAMES.contains(getToken(1).image.toUpperCase());
    }

  final public void CompilationUnit() throws ParseException {
    SequenceOfStatements();
  }

  final public void SequenceOfStatements() throws ParseException {
    label_1:
    while (true) {
      PLSQLStatement();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_SELECT:
      case 160:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
  }

  final public void PLSQLStatement() throws ParseException {
    SQLStatement();
  }

  final public void SQLStatement() throws ParseException {
    QueryStatement();
  }

  final public void QueryStatement() throws ParseException {ParserSelectStatement select;
    select = SelectStatement();
    jj_consume_token(152);
select_ = select;
  }

/* ---------------- General Productions --------------------- */
  final public 
String TableColumn() throws ParseException {String s;
    s = ObjectReference();
{if ("" != null) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String OracleObjectName() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case S_IDENTIFIER:{
      jj_consume_token(S_IDENTIFIER);
{if ("" != null) return token.image;}
      break;
      }
    case S_QUOTED_IDENTIFIER:{
      jj_consume_token(S_QUOTED_IDENTIFIER);
String s = token.image; {if ("" != null) return s.substring(1, s.length() - 1);}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String TNSName() throws ParseException {StringBuilder name = new StringBuilder();
    jj_consume_token(S_IDENTIFIER);
name.append(token.image);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 153:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(153);
      jj_consume_token(S_IDENTIFIER);
name.append(".").append(token.image);
    }
{if ("" != null) return name.toString();}
    throw new Error("Missing return statement in function");
  }

  final public ParserOperator Relop() throws ParseException {ParserOperator op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 154:{
      jj_consume_token(154);
op = ParserOperator.Eq;
      break;
      }
    case 155:{
      jj_consume_token(155);
      jj_consume_token(154);
op = ParserOperator.Ne;
      break;
      }
    case 156:{
      jj_consume_token(156);
op = ParserOperator.None;
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      if (jj_2_1(2)) {
        jj_consume_token(157);
        jj_consume_token(154);
op = ParserOperator.Ge;
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 157:{
          jj_consume_token(157);
op = ParserOperator.Gt;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          if (jj_2_2(2)) {
            jj_consume_token(158);
            jj_consume_token(157);
op = ParserOperator.Ne;
          } else if (jj_2_3(2)) {
            jj_consume_token(158);
            jj_consume_token(154);
op = ParserOperator.Le;
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 158:{
              jj_consume_token(158);
op = ParserOperator.Lt;
              break;
              }
            default:
              jj_la1[5] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
{if ("" != null) return op;}
    throw new Error("Missing return statement in function");
  }

  final public String TableName() throws ParseException {String s;
    StringBuilder name = new StringBuilder();
    // schema.table@link
        s = OracleObjectName();
name.append(s);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 153:{
      jj_consume_token(153);
      s = OracleObjectName();
name.append(".").append(s);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 159:{
      jj_consume_token(159);
      s = TNSName();
name.append("@").append(s);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
{if ("" != null) return name.toString();}
    throw new Error("Missing return statement in function");
  }

/* --------------- General Productions ends here --------------- */

/* ----------- SQL productions start here ----------------- */
  final public 
ParserSelectStatement SelectStatement() throws ParseException {List<ParserSortItem> orderBy = null;
    ParserSelectStatement select;
    ParserExpression limit=null, offset=null;
    ParserLimitClause limitclause = null;
    select = SelectWithoutOrder();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_ORDER:{
      orderBy = OrderByClause();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_FOR:{
      ForUpdateClause();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_LIMIT:{
      jj_consume_token(K_LIMIT);
      limit = SQLPrimaryExpression();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_OFFSET:{
      jj_consume_token(K_OFFSET);
      offset = SQLPrimaryExpression();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
if ((limit!=null) || (offset!=null))
            limitclause = new ParserLimitClause(limit, offset);
            ((ParserSingleSelectStatement)select).setLimitClause(limitclause);
        ((ParserSingleSelectStatement)select).setOrderBy(orderBy);
        {if ("" != null) return select;}
    throw new Error("Missing return statement in function");
  }

  final public ParserSelectStatement SelectWithoutOrder() throws ParseException {ParserSelectStatement left, right = null;
    ParserSelectOperator op = null;
    boolean all = false;
    left = SelectSet();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_INTERSECT:
      case K_MINUS:
      case K_UNION:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_UNION:{
        jj_consume_token(K_UNION);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_ALL:{
          jj_consume_token(K_ALL);
all = true;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          ;
        }
op = all ? ParserSelectOperator.UnionAll : ParserSelectOperator.Union;
        break;
        }
      case K_INTERSECT:{
        jj_consume_token(K_INTERSECT);
op = ParserSelectOperator.Intersect;
        break;
        }
      case K_MINUS:{
        jj_consume_token(K_MINUS);
op = ParserSelectOperator.Except;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = SelectSet();
left = new ParserMultiSelectStatement(left, op, right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ParserSelectStatement SelectSet() throws ParseException {ParserSelectStatement select;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_SELECT:{
      select = Select();
      break;
      }
    case 160:{
      jj_consume_token(160);
      select = SubQuery();
      jj_consume_token(161);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return select;}
    throw new Error("Missing return statement in function");
  }

  final public ParserSelectStatement Select() throws ParseException {List<ParserSelectColumn> columns;
    List<ParserExpression> groupBy=null;
    ParserFromClause from;
    ParserExpression whereExpr=null;
    ParserSelectStatement select;
    jj_consume_token(K_SELECT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_ALL:
    case K_DISTINCT:
    case K_UNIQUE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ALL:{
        jj_consume_token(K_ALL);
        break;
        }
      case K_DISTINCT:{
        jj_consume_token(K_DISTINCT);
        break;
        }
      case K_UNIQUE:{
        jj_consume_token(K_UNIQUE);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    columns = SelectList();
    from = FromClause();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_WHERE:{
      whereExpr = WhereClause();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_CONNECT:
    case K_START:{
      ConnectClause();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_GROUP:
    case K_HAVING:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_HAVING:{
        HavingClause();
        groupBy = GroupByClause();
        break;
        }
      case K_GROUP:{
        groupBy = GroupByClause();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_HAVING:{
          HavingClause();
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
select = new ParserSingleSelectStatement(null, columns, from, whereExpr, groupBy, null, null, null);
        {if ("" != null) return select;}
    throw new Error("Missing return statement in function");
  }

/* Checks for whatever follows  SELECT */
  final public List<ParserSelectColumn> SelectList() throws ParseException {List<ParserSelectColumn> columns = new ArrayList<ParserSelectColumn>();
        ParserSelectColumn column;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 162:{
      jj_consume_token(162);
column = new ParserSelectColumn(null, "");
                        column.setTableName(null);
                        columns.add(column);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      if (jj_2_4(1)) {
        column = SelectItem();
columns.add(column);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 163:{
            ;
            break;
            }
          default:
            jj_la1[23] = jj_gen;
            break label_4;
          }
          jj_consume_token(163);
          column = SelectItem();
columns.add(column);
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return columns;}
    throw new Error("Missing return statement in function");
  }

  final public ParserSelectColumn SelectItem() throws ParseException {String table="", alias="";
        ParserExpression expr=null;
        ParserObjectName name;
        ParserSelectColumn column;
    if (jj_2_5(2)) {
      table = OracleObjectName();
      jj_consume_token(164);
    } else if (jj_2_6(4)) {
      table = OracleObjectName();
      jj_consume_token(153);
      OracleObjectName();
      jj_consume_token(164);
    } else if (jj_2_7(1)) {
      expr = SQLSimpleExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_AS:
    case K_RETURNING:
    case K_WHEN:
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_AS:{
        jj_consume_token(K_AS);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      alias = SelectItemAlias();
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
if (expr != null){
                        column = new ParserSelectColumn(expr, alias);
                } else {
                        name = new ParserObjectName(table);
                        column = new ParserSelectColumn(name);
                }
                {if ("" != null) return column;}
    throw new Error("Missing return statement in function");
  }

  final public String SelectItemAlias() throws ParseException {String s = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:{
      s = OracleObjectName();
      break;
      }
    case K_RETURNING:{
      jj_consume_token(K_RETURNING);
      break;
      }
    case K_WHEN:{
      jj_consume_token(K_WHEN);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return (s!=null) ? s : token.image;}
    throw new Error("Missing return statement in function");
  }

  final public ParserExpression AnalyticFunction() throws ParseException {ParserExpression expr;
    expr = FunctionCall();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_OVER:{
      jj_consume_token(K_OVER);
      jj_consume_token(160);
      AnalyticClause();
      jj_consume_token(161);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public void AnalyticClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_PARTITION:{
      QueryPartitionClause();
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_ORDER:{
      OrderByClause();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_RANGE:
      case K_ROWS:{
        WindowingClause();
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      ;
    }
  }

  final public void QueryPartitionClause() throws ParseException {
    jj_consume_token(K_PARTITION);
    jj_consume_token(K_BY);
    SQLExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 163:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_5;
      }
      jj_consume_token(163);
      SQLExpression();
    }
  }

  final public void WindowingClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_ROWS:{
      jj_consume_token(K_ROWS);
      break;
      }
    case K_RANGE:{
      jj_consume_token(K_RANGE);
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_CURRENT:{
      jj_consume_token(K_CURRENT);
      jj_consume_token(K_ROW);
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      if (jj_2_10(1)) {
        SQLSimpleExpression();
        ID("PRECEDING");
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_BETWEEN:{
          jj_consume_token(K_BETWEEN);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_CURRENT:{
            jj_consume_token(K_CURRENT);
            jj_consume_token(K_ROW);
            break;
            }
          default:
            jj_la1[34] = jj_gen;
            if (jj_2_8(1)) {
              SQLSimpleExpression();
              ID("PRECEDING|FOLLOWING");
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          jj_consume_token(K_AND);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_CURRENT:{
            jj_consume_token(K_CURRENT);
            jj_consume_token(K_ROW);
            break;
            }
          default:
            jj_la1[35] = jj_gen;
            if (jj_2_9(1)) {
              SQLSimpleExpression();
              ID("PRECEDING|FOLLOWING");
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public ParserFromClause FromClause() throws ParseException {ParserExpression table;
    ParserFromClause from = new ParserFromClause();
    jj_consume_token(K_FROM);
    table = TableReference();
from.AddExpr(table);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 163:{
        ;
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        break label_6;
      }
      jj_consume_token(163);
      table = TableReference();
from.AddExpr(table);
    }
{if ("" != null) return from;}
    throw new Error("Missing return statement in function");
  }

  final public ParserExpression TableReference() throws ParseException {ParserExpression table;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_ONLY:{
      jj_consume_token(K_ONLY);
      jj_consume_token(160);
      table = QueryTableExpression();
      jj_consume_token(161);
      break;
      }
    case K_TABLE:
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
    case 160:{
      table = QueryTableExpression();
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return table;}
    throw new Error("Missing return statement in function");
  }

  final public ParserExpression QueryTableExpression() throws ParseException {String tableName = "", alias = "";
    ParserObjectName name = null;
    ParserExpression left = null;
    ParserJoinExpression right = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:{
      tableName = TableName();
name = new ParserObjectName(tableName);
           left = new ParserNameExpression(name);
      break;
      }
    case K_TABLE:{
      TableCollectionExpression();
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      if (jj_2_11(3)) {
        jj_consume_token(160);
        SubQuery();
        jj_consume_token(161);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 160:{
          jj_consume_token(160);
          TableReference();
          jj_consume_token(161);
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:{
      alias = OracleObjectName();
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_FULL:
      case K_INNER:
      case K_LEFT:
      case K_RIGHT:{
        ;
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        break label_7;
      }
      right = Join();
right.setLeftExpression(left); left = right;
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ParserExpression TableCollectionExpression() throws ParseException {ParserExpression expr;
    jj_consume_token(K_TABLE);
    jj_consume_token(160);
    expr = SQLSimpleExpression();
    jj_consume_token(161);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 160:{
      jj_consume_token(160);
      jj_consume_token(165);
      jj_consume_token(161);
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      ;
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public ParserJoinExpression Join() throws ParseException {ParserJoinOperator op;
    ParserExpression expr, table;
    ParserExpression col=null, cond=null;
    ParserListExpression colList = new ParserListExpression();
    op = JoinType();
    ID("JOIN");
    table = TableReference();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_ON:{
      jj_consume_token(K_ON);
      cond = SQLExpression();
      break;
      }
    case K_USING:{
      jj_consume_token(K_USING);
      jj_consume_token(160);
      col = ColumnName();
colList.add(col);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 163:{
          ;
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          break label_8;
        }
        jj_consume_token(163);
        col = ColumnName();
colList.add(col);
      }
      jj_consume_token(161);
      break;
      }
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
expr = (cond!=null) ? cond : colList;
        {if ("" != null) return new ParserJoinExpression(null, op, table, expr);}
    throw new Error("Missing return statement in function");
  }

  final public ParserJoinOperator JoinType() throws ParseException {ParserJoinOperator op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_INNER:{
      jj_consume_token(K_INNER);
op = ParserJoinOperator.Inner;
      break;
      }
    case K_FULL:
    case K_LEFT:
    case K_RIGHT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_LEFT:{
        jj_consume_token(K_LEFT);
op = ParserJoinOperator.Left;
        break;
        }
      case K_RIGHT:{
        jj_consume_token(K_RIGHT);
op = ParserJoinOperator.Right;
        break;
        }
      case K_FULL:{
        jj_consume_token(K_FULL);
op = ParserJoinOperator.Full;
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ID("OUTER");
      break;
      }
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return op;}
    throw new Error("Missing return statement in function");
  }

  final public ParserNameExpression ColumnName() throws ParseException {ParserObjectName name;
    jj_consume_token(S_IDENTIFIER);
name = new ParserObjectName(token.image);
        {if ("" != null) return new ParserNameExpression(name);}
    throw new Error("Missing return statement in function");
  }

  final public ParserExpression WhereClause() throws ParseException {ParserExpression expr;
    jj_consume_token(K_WHERE);
    expr = SQLExpression();
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public void ConnectClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_START:{
      jj_consume_token(K_START);
      jj_consume_token(K_WITH);
      SQLExpression();
      break;
      }
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    jj_consume_token(K_CONNECT);
    jj_consume_token(K_BY);
    SQLExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_START:{
      jj_consume_token(K_START);
      jj_consume_token(K_WITH);
      SQLExpression();
      break;
      }
    default:
      jj_la1[50] = jj_gen;
      ;
    }
  }

  final public List<ParserExpression> GroupByClause() throws ParseException {ParserExpression expr;
    jj_consume_token(K_GROUP);
    jj_consume_token(K_BY);
    expr = SQLExpressionList();
{if ("" != null) return (expr instanceof ParserListExpression) ? ((ParserListExpression)expr).list : null;}
    throw new Error("Missing return statement in function");
  }

  final public void HavingClause() throws ParseException {
    jj_consume_token(K_HAVING);
    SQLExpression();
  }

  final public List<ParserSortItem> OrderByClause() throws ParseException {List<ParserSortItem> list = new ArrayList<ParserSortItem>();
    ParserSortItem item;
    jj_consume_token(K_ORDER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_SIBLINGS:{
      jj_consume_token(K_SIBLINGS);
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    jj_consume_token(K_BY);
    item = OrderByExpression();
list.add(item);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 163:{
        ;
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        break label_9;
      }
      jj_consume_token(163);
      item = OrderByExpression();
list.add(item);
    }
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
  }

  final public ParserSortItem OrderByExpression() throws ParseException {ParserExpression expr;
    ParserSortOrder order = null;
    expr = SQLSimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_ASC:
    case K_DESC:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ASC:{
        jj_consume_token(K_ASC);
order = ParserSortOrder.Ascending;
        break;
        }
      case K_DESC:{
        jj_consume_token(K_DESC);
order = ParserSortOrder.Descending;
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_NULLS:{
      jj_consume_token(K_NULLS);
      ID("LAST");
      break;
      }
    default:
      jj_la1[55] = jj_gen;
      ;
    }
{if ("" != null) return new ParserSortItem(expr, order);}
    throw new Error("Missing return statement in function");
  }

  final public void ForUpdateClause() throws ParseException {
    jj_consume_token(K_FOR);
    jj_consume_token(K_UPDATE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_OF:{
      jj_consume_token(K_OF);
      TableColumn();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 163:{
          ;
          break;
          }
        default:
          jj_la1[56] = jj_gen;
          break label_10;
        }
        jj_consume_token(163);
        TableColumn();
      }
      break;
      }
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_NOWAIT:
    case K_WAIT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOWAIT:{
        jj_consume_token(K_NOWAIT);
        break;
        }
      case K_WAIT:{
        jj_consume_token(K_WAIT);
        SQLSimpleExpression();
        break;
        }
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[59] = jj_gen;
      ;
    }
  }

  final public ParserExpression SQLExpression() throws ParseException {ParserExpression left, right;
    ParserOperator op = ParserOperator.Or;
    left = SQLAndExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_OR:{
        ;
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        break label_11;
      }
      jj_consume_token(K_OR);
      right = SQLAndExpression();
left = new ParserBinaryExpression(left, op, right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ParserExpression SQLAndExpression() throws ParseException {ParserExpression left, right;
    ParserOperator op = ParserOperator.And;
    left = SQLUnaryLogicalExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_AND:{
        ;
        break;
        }
      default:
        jj_la1[61] = jj_gen;
        break label_12;
      }
      jj_consume_token(K_AND);
      right = SQLUnaryLogicalExpression();
left = new ParserBinaryExpression(left, op, right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ParserExpression SQLUnaryLogicalExpression() throws ParseException {ParserExpression left = null;
    ParserOperator op = null;
    if (jj_2_12(2)) {
      ExistsClause();
    } else if (jj_2_13(1)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      left = SQLRelationalExpression();
{if ("" != null) return left;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ParserExistsExpression ExistsClause() throws ParseException {ParserSelectStatement select;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_NOT:{
      jj_consume_token(K_NOT);
      break;
      }
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    jj_consume_token(K_EXISTS);
    jj_consume_token(160);
    select = SubQuery();
    jj_consume_token(161);
{if ("" != null) return new ParserExistsExpression(select);}
    throw new Error("Missing return statement in function");
  }

  final public ParserExpression SQLRelationalExpression() throws ParseException {ParserExpression expr, rexpr=null;
    if (jj_2_14(2147483647)) {
      jj_consume_token(160);
      expr = SQLExpressionList();

      jj_consume_token(161);
    } else if (jj_2_15(1)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_PRIOR:{
        jj_consume_token(K_PRIOR);
        break;
        }
      default:
        jj_la1[64] = jj_gen;
        ;
      }
      expr = SQLSimpleExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_BETWEEN:
    case K_IN:
    case K_IS:
    case K_LIKE:
    case K_NOT:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:{
        rexpr = SQLRelationalOperatorExpression();
        break;
        }
      default:
        jj_la1[65] = jj_gen;
        if (jj_2_16(2)) {
          rexpr = SQLInClause();
        } else if (jj_2_17(2)) {
          rexpr = SQLBetweenClause();
        } else if (jj_2_18(2)) {
          rexpr = SQLLikeClause();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_IS:{
            IsNullClause();
            break;
            }
          default:
            jj_la1[66] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
      }
    default:
      jj_la1[67] = jj_gen;
      ;
    }
if (rexpr instanceof ParserLikeExpression)
            ((ParserLikeExpression)rexpr).setLeftExpression(expr);
        else if (rexpr instanceof ParserBetweenExpression)
            ((ParserBetweenExpression)rexpr).setLeftExpression(expr);
        else if (rexpr instanceof ParserInExpression)
            ((ParserInExpression)rexpr).setExpression(expr);
        else if (rexpr instanceof ParserBinaryExpression)
            ((ParserBinaryExpression)rexpr).setLeftExpression(expr);
        else if (rexpr instanceof ParserUnaryExpression)
            ((ParserUnaryExpression)rexpr).setExpression(expr);
        {if ("" != null) return (rexpr!=null) ? rexpr : expr;}
    throw new Error("Missing return statement in function");
  }

  final public ParserUnaryExpression IsNullClause() throws ParseException {ParserOperator op = ParserOperator.Is_Null;
    jj_consume_token(K_IS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_NOT:{
      jj_consume_token(K_NOT);
op = ParserOperator.Not_Null;
      break;
      }
    default:
      jj_la1[68] = jj_gen;
      ;
    }
    jj_consume_token(K_NULL);
{if ("" != null) return new ParserUnaryExpression(op, null);}
    throw new Error("Missing return statement in function");
  }

  final public ParserListExpression SQLExpressionList() throws ParseException {ParserListExpression list = new ParserListExpression();
    ParserExpression expr;
    expr = SQLExpression();
list.add(expr);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 163:{
        ;
        break;
        }
      default:
        jj_la1[69] = jj_gen;
        break label_13;
      }
      jj_consume_token(163);
      expr = SQLExpression();
list.add(expr);
    }
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
  }

  final public ParserBinaryExpression SQLRelationalOperatorExpression() throws ParseException {ParserExpression expr=null;
    ParserOperator op;
    op = Relop();
    if (jj_2_19(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ALL:
      case K_ANY:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_ALL:{
          jj_consume_token(K_ALL);
          break;
          }
        case K_ANY:{
          jj_consume_token(K_ANY);
          break;
          }
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[71] = jj_gen;
        ;
      }
      jj_consume_token(160);
      SubQuery();
      jj_consume_token(161);
    } else if (jj_2_20(1)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_PRIOR:{
        jj_consume_token(K_PRIOR);
        break;
        }
      default:
        jj_la1[72] = jj_gen;
        ;
      }
      expr = SQLSimpleExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new ParserBinaryExpression(null, op, expr);}
    throw new Error("Missing return statement in function");
  }

  final public ParserInExpression SQLInClause() throws ParseException {ParserSelectStatement select=null;
    ParserListExpression list=null;
    boolean in = true;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_NOT:{
      jj_consume_token(K_NOT);
in = false;
      break;
      }
    default:
      jj_la1[73] = jj_gen;
      ;
    }
    jj_consume_token(K_IN);
    jj_consume_token(160);
    if (jj_2_21(3)) {
      select = SubQuery();

    } else if (jj_2_22(1)) {
      list = SQLExpressionList();

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(161);
{if ("" != null) return (list!=null) ? new ParserInExpression(null, in, list) : new ParserInExpression(null, in, select);}
    throw new Error("Missing return statement in function");
  }

  final public ParserBetweenExpression SQLBetweenClause() throws ParseException {ParserExpression begin, end;
    boolean not = true;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_NOT:{
      jj_consume_token(K_NOT);
not = false;
      break;
      }
    default:
      jj_la1[74] = jj_gen;
      ;
    }
    jj_consume_token(K_BETWEEN);
    begin = SQLSimpleExpression();
    jj_consume_token(K_AND);
    end = SQLSimpleExpression();
{if ("" != null) return new ParserBetweenExpression(null, not, begin, end);}
    throw new Error("Missing return statement in function");
  }

  final public ParserLikeExpression SQLLikeClause() throws ParseException {ParserExpression rexpr, eexpr = null;
    ParserLikeOperator op = new ParserLikeOperator(ParserLike.Like, false);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_NOT:{
      jj_consume_token(K_NOT);
op.setNegate(true);
      break;
      }
    default:
      jj_la1[75] = jj_gen;
      ;
    }
    jj_consume_token(K_LIKE);
    rexpr = SQLSimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_ESCAPE:{
      jj_consume_token(K_ESCAPE);
      eexpr = SQLSimpleExpression();
      break;
      }
    default:
      jj_la1[76] = jj_gen;
      ;
    }
{if ("" != null) return new ParserLikeExpression(null, op, rexpr, eexpr);}
    throw new Error("Missing return statement in function");
  }

  final public ParserExpression SQLSimpleExpression() throws ParseException {ParserExpression left, right;
    ParserOperator op=null;
    left = SQLMultiplicativeExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 165:
      case 166:
      case 167:{
        ;
        break;
        }
      default:
        jj_la1[77] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 165:{
        jj_consume_token(165);
        break;
        }
      case 166:{
        jj_consume_token(166);
        break;
        }
      case 167:{
        jj_consume_token(167);
        break;
        }
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
switch (token.image) {
                case "+":
                    op = ParserOperator.Plus;
                        break;
                case "-":
                        op = ParserOperator.Minus;
                        break;
                case "||":
                        op = ParserOperator.Or;
                        break;
            }
      right = SQLMultiplicativeExpression();
left = new ParserBinaryExpression(left, op, right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ParserExpression SQLMultiplicativeExpression() throws ParseException {ParserExpression left, right;
    ParserOperator op=null;
    left = SQLExponentExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 162:
      case 168:{
        ;
        break;
        }
      default:
        jj_la1[79] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 162:{
        jj_consume_token(162);
        break;
        }
      case 168:{
        jj_consume_token(168);
        break;
        }
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
switch (token.image) {
                case "*":
                    op = ParserOperator.Star;
                        break;
                case "/":
                        op = ParserOperator.Slash;
                        break;
            }
      right = SQLExponentExpression();
left = new ParserBinaryExpression(left, op, right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ParserExpression SQLExponentExpression() throws ParseException {ParserExpression left, right;
    ParserOperator op=null;
    left = SQLUnaryExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 169:{
        ;
        break;
        }
      default:
        jj_la1[81] = jj_gen;
        break label_16;
      }
      jj_consume_token(169);
      right = SQLUnaryExpression();
op = ParserOperator.Star;
           left = new ParserBinaryExpression(left, op, right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ParserExpression SQLUnaryExpression() throws ParseException {ParserExpression left;
    ParserOperator op = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 165:
    case 166:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 165:{
        jj_consume_token(165);
        break;
        }
      case 166:{
        jj_consume_token(166);
        break;
        }
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
op = (token.image=="+") ? ParserOperator.Plus : ParserOperator.Minus;
      break;
      }
    default:
      jj_la1[83] = jj_gen;
      ;
    }
    left = SQLPrimaryExpression();
{if ("" != null) return new ParserUnaryExpression(op, left);}
    throw new Error("Missing return statement in function");
  }

  final public ParserExpression SQLPrimaryExpression() throws ParseException {String column = "";
    ParserObjectName name = null;
    ParserExpression expr = null;
    ParserSelectStatement select = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case S_NUMBER:{
      jj_consume_token(S_NUMBER);
column = token.image;
      break;
      }
    case S_CHAR_LITERAL:{
      jj_consume_token(S_CHAR_LITERAL);
column = token.image;
      break;
      }
    case K_NULL:{
      jj_consume_token(K_NULL);
expr = new ParserNullExpression();
      break;
      }
    case K_CASE:{
      expr = SQLCaseExpression();
      break;
      }
    case 160:{
      jj_consume_token(160);
      if (jj_2_23(3)) {
        select = SelectStatement();
expr = new ParserSelectExpression(select);
      } else if (jj_2_24(1)) {
        expr = SQLExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(161);
      break;
      }
    default:
      jj_la1[84] = jj_gen;
      if (jj_2_25(2147483647)) {
        IntervalExpression();
      } else if (jj_2_26(2147483647)) {
        OuterJoinExpression();
      } else if (seeAnalyticFunction()) {
        expr = AnalyticFunction();
      } else if (jj_2_27(2147483647)) {
        expr = FunctionCall();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_IDENTIFIER:
        case S_QUOTED_IDENTIFIER:{
          column = TableColumn();
          break;
          }
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
if (column!="")
            name = new ParserObjectName(column);
                {if ("" != null) return (expr!=null) ? expr : new ParserNameExpression(name);}
    throw new Error("Missing return statement in function");
  }

  final public ParserCaseExpression SQLCaseExpression() throws ParseException {ParserExpression operand=null, witem, titem, eitem=null;
    List<ParserCaseItem> items = new ArrayList<ParserCaseItem>();
    ParserCaseItem item;
    jj_consume_token(K_CASE);
    if (jj_2_28(1)) {
      operand = SQLSimpleExpression();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_WHEN:{
          ;
          break;
          }
        default:
          jj_la1[86] = jj_gen;
          break label_17;
        }
        jj_consume_token(K_WHEN);
        witem = SQLSimpleExpression();
        jj_consume_token(K_THEN);
        titem = SQLSimpleExpression();
item = new ParserCaseItem(witem, titem);
               items.add(item);
      }
    } else {
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_WHEN:{
          ;
          break;
          }
        default:
          jj_la1[87] = jj_gen;
          break label_18;
        }
        jj_consume_token(K_WHEN);
        witem = SQLExpression();
        jj_consume_token(K_THEN);
        titem = SQLSimpleExpression();
item = new ParserCaseItem(witem, titem);
               items.add(item);
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_ELSE:{
      jj_consume_token(K_ELSE);
      eitem = SQLSimpleExpression();
      break;
      }
    default:
      jj_la1[88] = jj_gen;
      ;
    }
    jj_consume_token(K_END);
{if ("" != null) return new ParserCaseExpression(operand, items, eitem);}
    throw new Error("Missing return statement in function");
  }

  final public void IntervalExpression() throws ParseException {
    ID("INTERVAL");
    SQLSimpleExpression();
    if ("DAY".equalsIgnoreCase(getToken(1).image)) {
      ID("DAY");
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 160:{
        jj_consume_token(160);
        jj_consume_token(S_NUMBER);
        jj_consume_token(161);
        break;
        }
      default:
        jj_la1[89] = jj_gen;
        ;
      }
      jj_consume_token(K_TO);
      ID("SECOND");
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 160:{
        jj_consume_token(160);
        jj_consume_token(S_NUMBER);
        jj_consume_token(161);
        break;
        }
      default:
        jj_la1[90] = jj_gen;
        ;
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        ID("YEAR");
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 160:{
          jj_consume_token(160);
          jj_consume_token(S_NUMBER);
          jj_consume_token(161);
          break;
          }
        default:
          jj_la1[91] = jj_gen;
          ;
        }
        jj_consume_token(K_TO);
        ID("MONTH");
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 160:{
          jj_consume_token(160);
          jj_consume_token(S_NUMBER);
          jj_consume_token(161);
          break;
          }
        default:
          jj_la1[92] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[93] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public ParserFunctionExpression FunctionCall() throws ParseException {String name;
    List<ParserExpression> exargs = null;
    ParserDistinct dist = null;
    name = FunctionReference();
    if ("TRIM".equalsIgnoreCase(lastObjectReference)) {
      TrimArguments();
    } else if ("EXTRACT".equalsIgnoreCase(lastObjectReference)) {
      jj_consume_token(160);
      DatetimeField();
      jj_consume_token(K_FROM);
      SQLSimpleExpression();
      jj_consume_token(161);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 160:{
        jj_consume_token(160);
        if (jj_2_30(1)) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_ALL:
          case K_DISTINCT:
          case K_UNIQUE:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case K_ALL:{
              jj_consume_token(K_ALL);
dist = ParserDistinct.All;
              break;
              }
            case K_DISTINCT:{
              jj_consume_token(K_DISTINCT);
dist = ParserDistinct.Distinct;
              break;
              }
            case K_UNIQUE:{
              jj_consume_token(K_UNIQUE);
dist = ParserDistinct.None;
              break;
              }
            default:
              jj_la1[94] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[95] = jj_gen;
            ;
          }
          if (jj_2_29(1)) {
            exargs = FunctionArgumentList();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 162:{
              jj_consume_token(162);
              break;
              }
            default:
              jj_la1[96] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        } else {
          ;
        }
        jj_consume_token(161);
        break;
        }
      default:
        jj_la1[97] = jj_gen;
        ;
      }
    }
{if ("" != null) return new ParserFunctionExpression(name, dist, exargs);}
    throw new Error("Missing return statement in function");
  }

  final public String FunctionReference() throws ParseException {String name;
    name = ObjectReference();
{if ("" != null) return name;}
    throw new Error("Missing return statement in function");
  }

  final public List<ParserExpression> FunctionArgumentList() throws ParseException {ParserExpression expr;
    List<ParserExpression> exargs = new ArrayList<ParserExpression>();
    expr = FunctionArgument();
exargs.add(expr);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 163:{
        ;
        break;
        }
      default:
        jj_la1[98] = jj_gen;
        break label_19;
      }
      jj_consume_token(163);
      expr = FunctionArgument();
exargs.add(expr);
    }
{if ("" != null) return exargs;}
    throw new Error("Missing return statement in function");
  }

  final public ParserExpression FunctionArgument() throws ParseException {ParserExpression expr;
    if (jj_2_31(2)) {
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(170);
    } else {
      ;
    }
    expr = SQLExpression();
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public void TrimArguments() throws ParseException {
    jj_consume_token(160);
    if (getToken(1).image.matches("(?i)LEADING|TRAILING|BOTH")) {
      jj_consume_token(S_IDENTIFIER);
      if (jj_2_32(1)) {
        SQLSimpleExpression();
      } else {
        ;
      }
      jj_consume_token(K_FROM);
      SQLSimpleExpression();
    } else if (jj_2_33(1)) {
      SQLSimpleExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_FROM:{
        jj_consume_token(K_FROM);
        SQLSimpleExpression();
        break;
        }
      default:
        jj_la1[99] = jj_gen;
        ;
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(161);
  }

  final public void DatetimeField() throws ParseException {
    jj_consume_token(S_IDENTIFIER);
  }

  final public String ObjectReference() throws ParseException {String s;
    StringBuilder name = new StringBuilder();
    s = OracleObjectName();
name.append(s);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 153:{
      jj_consume_token(153);
      s = OracleObjectName();
name.append(".").append(s);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 153:{
        jj_consume_token(153);
        s = OracleObjectName();
name.append(".").append(s);
        break;
        }
      default:
        jj_la1[100] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[101] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 159:{
      jj_consume_token(159);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 155:{
        jj_consume_token(155);
        break;
        }
      case S_IDENTIFIER:{
        s = TNSName();
name.append("@").append(s);
        break;
        }
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[103] = jj_gen;
      ;
    }
{if ("" != null) return lastObjectReference = name.toString();}
    throw new Error("Missing return statement in function");
  }

  final public void OuterJoinExpression() throws ParseException {
    TableColumn();
    jj_consume_token(160);
    jj_consume_token(165);
    jj_consume_token(161);
  }

  final public ParserSelectStatement SubQuery() throws ParseException {ParserSelectStatement select;
    select = SelectStatement();
{if ("" != null) return select;}
    throw new Error("Missing return statement in function");
  }

/** Expect an <S_IDENTIFIER> with the given value. */
  final public void ID(String id) throws ParseException {
    jj_consume_token(S_IDENTIFIER);
if (!token.image.matches("(?i)" + id)) {
            {if (true) throw new ParseException("Encountered " + token.image
                + " at line " + token.beginLine + ", column " + token.beginColumn + "."
                + "\u005cnWas expecting: " + id);}
        }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_188()
 {
    if (jj_scan_token(159)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_187()
 {
    if (jj_scan_token(153)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_184()
 {
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_scan_token(K_EXISTS)) return true;
    if (jj_scan_token(160)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    return false;
  }

  private boolean jj_3R_135()
 {
    if (jj_scan_token(163)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_130()
 {
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_51()) return true;
    if (jj_scan_token(160)) return true;
    if (jj_scan_token(165)) return true;
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_182()
 {
    if (jj_scan_token(158)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(158)) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(158)) return true;
    if (jj_scan_token(157)) return true;
    return false;
  }

  private boolean jj_3R_181()
 {
    if (jj_scan_token(157)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(157)) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_180()
 {
    if (jj_scan_token(156)) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_scan_token(159)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    return false;
  }

  private boolean jj_3R_179()
 {
    if (jj_scan_token(155)) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_178()
 {
    if (jj_scan_token(154)) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_scan_token(153)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_scan_token(153)) return true;
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_169()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_3R_60()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_116()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_scan_token(153)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_90()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_scan_token(K_OF)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_135()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_136()
 {
    if (jj_scan_token(K_WAIT)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(S_QUOTED_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) jj_scanpos = xsp;
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_108()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_scan_token(160)) return true;
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.matches("(?i)LEADING|TRAILING|BOTH");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3_33()) return true;
    }
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_127()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_scan_token(K_FOR)) return true;
    if (jj_scan_token(K_UPDATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(170)) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_scan_token(160)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_scan_token(160)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_134()
 {
    if (jj_scan_token(K_NULLS)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_147()
 {
    if (jj_scan_token(163)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_143()
 {
    if (jj_scan_token(K_DESC)) return true;
    return false;
  }

  private boolean jj_3R_142()
 {
    if (jj_scan_token(K_ASC)) return true;
    return false;
  }

  private boolean jj_3R_133()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    }
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_147()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_124()
 {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_125()
 {
    if (jj_scan_token(163)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(K_UNIQUE)) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(K_DISTINCT)) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_scan_token(K_ORDER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_124()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_125()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(K_ALL)) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_scan_token(162)) return true;
    }
    return false;
  }

  private boolean jj_3R_162()
 {
    if (jj_scan_token(K_HAVING)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_111()
 {
    if (jj_scan_token(160)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_163()
 {
    if (jj_scan_token(K_GROUP)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_scan_token(160)) return true;
    if (jj_scan_token(146)) return true;
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(160)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_161()
 {
    if (jj_scan_token(K_START)) return true;
    if (jj_scan_token(K_WITH)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_160()
 {
    if (jj_scan_token(K_START)) return true;
    if (jj_scan_token(K_WITH)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_scan_token(160)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = "TRIM".equalsIgnoreCase(lastObjectReference);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_98()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = "EXTRACT".equalsIgnoreCase(lastObjectReference);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_151()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) jj_scanpos = xsp;
    if (jj_scan_token(K_CONNECT)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_32()) return true;
    xsp = jj_scanpos;
    if (jj_3R_161()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_150()
 {
    if (jj_scan_token(K_WHERE)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    if (jj_scan_token(K_TO)) return true;
    if (jj_3R_48()) return true;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) jj_scanpos = xsp;
    if (jj_scan_token(K_TO)) return true;
    if (jj_3R_48()) return true;
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_3R_48()) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = "DAY".equalsIgnoreCase(getToken(1).image);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  private boolean jj_3R_195()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_199()
 {
    if (jj_scan_token(K_FULL)) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    if (jj_scan_token(K_ELSE)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_198()
 {
    if (jj_scan_token(K_RIGHT)) return true;
    return false;
  }

  private boolean jj_3R_197()
 {
    if (jj_scan_token(K_LEFT)) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_scan_token(K_WHEN)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(K_THEN)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_103()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_196()
 {
    if (jj_scan_token(163)) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_194()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    }
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_scan_token(K_WHEN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(K_THEN)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_193()
 {
    if (jj_scan_token(K_INNER)) return true;
    return false;
  }

  private boolean jj_3R_190()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) return true;
    }
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_102()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_scan_token(K_CASE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_96()) jj_scanpos = xsp;
    if (jj_scan_token(K_END)) return true;
    return false;
  }

  private boolean jj_3R_192()
 {
    if (jj_scan_token(K_USING)) return true;
    if (jj_scan_token(160)) return true;
    if (jj_3R_195()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_196()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_191()
 {
    if (jj_scan_token(K_ON)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_3R_35()) return true;
    if (jj_scan_token(160)) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_186()
 {
    if (jj_3R_190()) return true;
    if (jj_3R_48()) return true;
    if (jj_3R_148()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) return true;
    }
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_189()
 {
    if (jj_scan_token(160)) return true;
    if (jj_scan_token(165)) return true;
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_185()
 {
    if (jj_scan_token(K_TABLE)) return true;
    if (jj_scan_token(160)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(161)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(160)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_scan_token(S_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = seeAnalyticFunction();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_177()
 {
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_176()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_175()
 {
    if (jj_scan_token(160)) return true;
    if (jj_3R_148()) return true;
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(160)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_174()
 {
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_173()
 {
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(165)) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) return true;
    }
    return false;
  }

  private boolean jj_3R_168()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_176()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_177()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_67()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_159()
 {
    if (jj_3R_168()) return true;
    return false;
  }

  private boolean jj_3R_129()
 {
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_scan_token(169)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_158()
 {
    if (jj_scan_token(K_ONLY)) return true;
    if (jj_scan_token(160)) return true;
    if (jj_3R_168()) return true;
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_scan_token(163)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_148()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) return true;
    }
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_149()
 {
    if (jj_scan_token(163)) return true;
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_22()) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_157()
 {
    if (jj_scan_token(K_CURRENT)) return true;
    if (jj_scan_token(K_ROW)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_22()) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_148()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_149()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_156()
 {
    if (jj_scan_token(K_CURRENT)) return true;
    if (jj_scan_token(K_ROW)) return true;
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_3R_114()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_146()
 {
    if (jj_scan_token(K_BETWEEN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    if (jj_scan_token(K_AND)) return true;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_scan_token(K_OVER)) return true;
    if (jj_scan_token(160)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(162)) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) return true;
    }
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_22()) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_145()
 {
    if (jj_scan_token(K_CURRENT)) return true;
    if (jj_scan_token(K_ROW)) return true;
    return false;
  }

  private boolean jj_3R_138()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_128()
 {
    if (jj_scan_token(K_PARTITION)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_137()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_3R_93()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_131()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(165)) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_scan_token(167)) return true;
    }
    }
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_120()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(134)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_171()
 {
    if (jj_scan_token(K_ESCAPE)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_21()) return true;
    if (jj_scan_token(153)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(164)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_21()) return true;
    if (jj_scan_token(164)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_22()) return true;
    xsp = jj_scanpos;
    if (jj_3R_171()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_164()
 {
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_101()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_scan_token(163)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_scan_token(160)) return true;
    if (jj_scan_token(K_SELECT)) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_scan_token(162)) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(160)) return true;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_153()
 {
    if (jj_3R_163()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_164()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_152()
 {
    if (jj_3R_162()) return true;
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_183()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    return false;
  }

  private boolean jj_3_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(93)) jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_139()
 {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_scan_token(160)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_170()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) jj_scanpos = xsp;
    if (jj_scan_token(160)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_141()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) return true;
    }
    return false;
  }

  private boolean jj_3R_140()
 {
    if (jj_3R_151()) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_scan_token(K_SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    if (jj_3R_89()) return true;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_166()
 {
    if (jj_3R_169()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_165()
 {
    if (jj_scan_token(163)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_165()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_132()
 {
    if (jj_scan_token(K_ALL)) return true;
    return false;
  }

  private boolean jj_3R_123()
 {
    if (jj_scan_token(K_MINUS)) return true;
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_scan_token(K_INTERSECT)) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_113()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    }
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_172()
 {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_167()
 {
    if (jj_scan_token(K_IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) jj_scanpos = xsp;
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_113()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_scan_token(K_OFFSET)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_scan_token(K_LIMIT)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_155()
 {
    if (jj_3R_167()) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(160)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(163)) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_154()
 {
    if (jj_3R_166()) return true;
    return false;
  }

  private boolean jj_3R_144()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(93)) jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(160)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(161)) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    return false;
  }

  /** Generated Token Manager. */
  public SQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[104];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x20,0x20,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x10000000,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x120,0x120,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x80000000,0x0,0x80000000,0x0,0x10,0x10,0x0,0x0,0x1000000,0x1800000,0x1800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10100000,0x0,0x0,0x0,0x100000,0x10100000,0x0,0x0,0x0,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x10,0x10,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x20,0x20000,0x200,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x4000000,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x8,0x0,0x0,0x40000,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x10000,0x1000,0x1000,0x200000,0x0,0x800,0x800,0x20000000,0x0,0x2,0x812,0x800,0x0,0x0,0x0,0x20000000,0x800,0x800,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x20000000,0x8000,0x40000000,0x40000000,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x80,0x0,0x0,0x1002,0x0,0x0,0x1002,0x0,0x0,0x0,0x0,0x0,0x1000000,0x1000000,0x0,0x0,0x200,0x0,0x0,0x0,0x200,0x200,0x800000,0x800000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x840000,0x2000000,0x1c000000,0x20000000,0x40000000,0x2000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x840040,0x840040,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x840000,0x840000,0x0,0x840000,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x7c000000,0x0,0x7c000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x401000,0x840000,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x2000000,0x8040000,0x80000000,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x8,0x1,0x0,0x1,0x0,0x0,0x1,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0,0xe0,0x104,0x104,0x200,0x60,0x60,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x4,0x1,0x8,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[33];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SQLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SQLParser(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[171];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 104; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 171; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 33; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
